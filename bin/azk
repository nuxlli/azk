#!/bin/bash

# Show and exit on errors
set -e

# Get azk root path
abs_dir() {
  cd "${1%/*}"; link=`readlink ${1##*/}`;
  if [ -z "$link" ]; then pwd; else abs_dir $link; fi
}

export AZK_ROOT_PATH=`cd \`abs_dir ${BASH_SOURCE:-$0}\`/..; pwd`
export PATH=$AZK_ROOT_PATH/bin:$PATH

# Namespace and domain
default_namespace="dev.azk.io"
export AZK_NAMESPACE=${AZK_NAMESPACE:-$default_namespace}
export AZK_BALANCER_HOST=${AZK_BALANCER_HOST:-$default_namespace}

# Default namespace use a data root path
data_namespace="/ns/${AZK_NAMESPACE}";
if [ "${AZK_NAMESPACE}" == "${default_namespace}" ]; then
  data_namespace="";
fi

# Base folders
export AZK_DATA_PATH=${AZK_DATA_PATH:-$HOME/.azk/data$data_namespace} # sockets, data disks and logs
export AZK_LIB_PATH=${AZK_LIB_PATH:-$AZK_ROOT_PATH/lib};              # transpiled files from src and node runtime
export AZK_NPM_PATH=${AZK_NPM_PATH:-$AZK_ROOT_PATH/node_modules};     # package dependencies

# Load dependencies versions
. ${AZK_ROOT_PATH}/.dependencies
export AZK_ISO_VERSION=${AZK_ISO_VERSION}
export LIBNSS_RESOLVER_VERSION=${LIBNSS_RESOLVER_VERSION}
export RSYNC_MIN_VERSION=${RSYNC_MIN_VERSION}

# Nvm paths and configs
export NVM_DIR=$AZK_LIB_PATH/nvm
export AZK_NODE_PATH=${AZK_NODE_PATH:-$NVM_DIR/versions/io.js/${NODE_VERSION#*-}/bin}

# Node load paths
export NODE_PATH=$NVM_DIR/$node_version/node_modules
export NODE_PATH=$AZK_ROOT_PATH:$NODE_PATH
export NODE_PATH=$AZK_NPM_PATH:$NODE_PATH
export NODE_PATH=$AZK_LIB_PATH:$NODE_PATH

# Extra path
export PATH=/usr/local/sbin:$PATH
export PATH=$AZK_NODE_PATH:$PATH
export PATH=$AZK_NPM_PATH/.bin:$PATH

# Agent opts
export AZK_AGENT_LOG_OUT_FILE=$AZK_DATA_PATH/logs/agent.log.out
export AZK_AGENT_LOG_ERR_FILE=$AZK_DATA_PATH/logs/agent.log.err
export AZK_AGENT_CONF_FILE=$AZK_DATA_PATH/run/agent.json
export AZK_AGENT_PING_FILE=$AZK_DATA_PATH/run/ping

# No use DOCKER_HOST
unset DOCKER_HOST

make_data_folders() {
  data_folders=(
    "$AZK_DATA_PATH"
    "$AZK_DATA_PATH/ns"
    "$AZK_DATA_PATH/run"
    "$AZK_DATA_PATH/vm"
    "$AZK_DATA_PATH/nvm"
    "$AZK_DATA_PATH/logs"
    "$AZK_DATA_PATH/persistent_folders"
    "$AZK_DATA_PATH/sync_folders"
  )

  for dir in "${data_folders[@]}"; do
    [ -d "$dir" ] || mkdir -p $dir
  done

  # Clean old install azk versions files (<0.6.0)
  (
    cd $AZK_DATA_PATH;
    rm -Rf vm/*.tmp vm/*.iso vm/*.bz vm/*.sha
  )
}

azk_load_nvm() {
  if ! $AZK_NODE_PATH/node --version &>/dev/null ; then
    echo "node not installed";
    echo "run: make -e bootstrap";
    exit 1;
  fi
}

npm() {
  exec $AZK_NODE_PATH/npm --cache=${AZK_DATA_PATH}/nvm/cache ${@}
}

azk_node_run() {
  exec $AZK_NODE_PATH/node $AZK_ROOT_PATH/bin/azk.js "${@}"
}

azk_agent_daemon() {
  # Clean log
  echo "" > ${AZK_AGENT_LOG_OUT_FILE}
  echo "" > ${AZK_AGENT_LOG_ERR_FILE}

  # Run agent
  set -m
  tail -n0 -f ${AZK_AGENT_LOG_OUT_FILE} &
  tail -n0 -f ${AZK_AGENT_LOG_ERR_FILE} 1>&2 &

  quiet() {
    "${@}" >/dev/null 2>&1
  }

  wait_started() {
    while quiet kill -0 "${AGENT_PID}" && [ ! -f "${AZK_AGENT_PING_FILE}" ]; do
      sleep 1;
    done
  }

  trap "graceExit" INT TERM
  graceExit() {
    quiet kill -TERM ${AGENT_PID} || true
    while quiet kill -0 "${AGENT_PID}"; do
      sleep 1;
    done
    quiet kill %1 %2 || true
    exit 1;
  }

  rm -f "${AZK_AGENT_PING_FILE}"
  azk_node_run "${@}" >> "${AZK_AGENT_LOG_OUT_FILE}" 2>> "${AZK_AGENT_LOG_ERR_FILE}" &
  AGENT_PID="$!"
  wait_started &
  wait $!
  quiet kill %1 %2 || true
}

azk_main() {
  make_data_folders
  case "$1" in
    nvm)
      extra_path=`pwd`/node_modules/.bin
      [ -d "$extra_path" ] && { export PATH=$extra_path:$PATH; }
      shift; exec "${@}"
      ;;
    agent-daemon)
      # Removing agent-daemon
      shift;
      azk_agent_daemon "${@}"
      ;;
    *)
      azk_load_nvm
      azk_node_run "${@}"
  esac
}

# run main function
azk_main "${@}"
